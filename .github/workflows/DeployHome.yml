name: Deploy Home

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deploy:
    runs-on: self-hosted
    environment: home
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Create directory
        run: mkdir -p ${{ vars.DESTINATION }}
      - name: export vars 
        run: | 
          echo "export INHIBIT=${{ vars.INHIBIT }}" >> ${{ vars.ENV_PATH }}
          echo "export DELAY=${{ vars.DELAY }}" >> ${{ vars.ENV_PATH }}
          echo "export PING_DOMAIN=${{ vars.PING_DOMAIN }}" >> ${{ vars.ENV_PATH }}
          echo "export PLEX_URL=${{ secrets.PLEX_URL }}" >> ${{ vars.ENV_PATH }}
          echo "export QB_URL=${{ secrets.QB_URL }}" >> ${{ vars.ENV_PATH }}
          echo "export QB_PORT=${{ vars.QB_PORT }}" >> ${{ vars.ENV_PATH }}
          echo "export QB_PORT=${{ vars.DELAY }}" >> ${{ vars.DELAY }}

      - name: Checkout
        uses: actions/checkout@v3
      - name: Copy 
        run: cp ${{ github.workspace }}/standby-monitor.sh ${{ vars.DESTINATION }}
      - name: Parameterize service file
        run: sed -e 's#__SCRIPT_PATH__#${{ vars.DESTINATION }}/standby-monitor.sh#g' -e 's#__DELAY__#${{ vars.DELAY }}#g' ./standby-monitor.template.service > ./standby-monitor.service 
      - name: Copy and enable service file
        run: | 
          echo ${{ secrets.SUDO_PASS }} | sudo -S cp ./standby-monitor.service /etc/systemd/system/standby-monitor.service
          sudo systemctl unmask standby-monitor.service
          sudo systemctl enable standby-monitor.service
          sudo systemctl restart standby-monitor.service